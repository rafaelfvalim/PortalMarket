{
  "name": "progressbar.js",
  "version": "0.9.0",
  "description": "Responsive and slick progress bars with animated SVG paths",
  "main": "src/main.js",
  "dependencies": {
    "shifty": "1.5.0"
  },
  "devDependencies": {
    "bluebird": "^2.3.6",
    "browserify": "^6.2.0",
    "chai": "^1.10.0",
    "chai-stats": "kimmobrunfeldt/chai-stats",
    "commander": "^2.4.0",
    "concurrently": "^0.1.1",
    "eslint": "^1.0.0",
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-uglify": "^0.6.0",
    "grunt-karma": "^0.9.0",
    "grunt-shell": "^1.1.1",
    "jscs": "^2.0.0",
    "karma": "^0.12.24",
    "karma-bro": "^0.8.0",
    "karma-mocha": "^0.1.9",
    "karma-sauce-launcher": "^0.2.10",
    "lodash": "^2.4.1",
    "mocha": "^2.0.1",
    "mustache": "^0.8.2",
    "node-static": "^0.7.7",
    "semver": "^4.1.0",
    "shelljs": "^0.3.0",
    "sinon": "~1.14.1",
    "string": "^2.2.0",
    "testem": "^0.6.22",
    "watchify": "^2.1.1"
  },
  "scripts": {
    "test": "./tools/test.sh",
    "dev": "concurrent 'npm run serve' 'grunt watch' 'open http://localhost:8080'",
    "serve": "static ./local-dev -c 0",
    "lint": "./tools/lint.sh",
    "jscs": "jscs ./src ./test",
    "eslint": "eslint --ext .js ./src ./test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kimmobrunfeldt/progressbar.js.git"
  },
  "author": {
    "name": "Kimmo Brunfeldt",
    "email": "kimmobrunfeldt@gmail.com",
    "url": "http://kimmobrunfeldt.github.io/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kimmobrunfeldt/progressbar.js/issues"
  },
  "homepage": "https://kimmobrunfeldt.github.io/progressbar.js/",
  "keywords": [
    "progress",
    "bar",
    "js",
    "svg",
    "circular",
    "circle",
    "pace",
    "radial",
    "line",
    "loading",
    "loader",
    "semi-circle",
    "indicator"
  ],
  "readme": "# ProgressBar.js\n\n**Version: 0.9.0** ([*previous stable*](https://github.com/kimmobrunfeldt/progressbar.js/tree/0.8.1))\n\n<br>\n![Demo animation](docs/animation.gif)\n\n<br>\nResponsive and slick progress bars with animated SVG paths.\nUse built-in shapes or [create your own paths](#pathpath-options).\n[Customize](#custom-animations) the animations as you wish.\n\n\n**Shortcuts**\n\n* [How to install](#installing-options)\n* [Demo & Examples](https://kimmobrunfeldt.github.io/progressbar.js)\n* [**Try** in JSFiddle](http://jsfiddle.net/kimmobrunfeldt/8xa87k31/392/)\n* [API documentation](#api)\n\n**Build status**\n\n[![Build Status](https://api.travis-ci.org/kimmobrunfeldt/progressbar.js.svg?branch=master)](https://travis-ci.org/kimmobrunfeldt/progressbar.js) *Build status and browser tests for current master*\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/kimmobrunfeldt.svg)](https://saucelabs.com/u/kimmobrunfeldt)\n\n\n# Get started\n\n*ProgressBar.js* is lightweight, MIT licensed and supports all major browsers including **IE9+**.\nSee complete examples in [examples](#examples) section.\n\n#### Installing options:\n\n* Using bower\n\n        bower install progressbar.js\n\n* Using npm\n\n        npm install progressbar.js\n\n* Including [*dist/progressbar.js*](dist/progressbar.js) or [dist/progressbar.min.js](dist/progressbar.min.js) from latest tag to your project.\n\n#### Loading module\n\nCommonJS\n\n```javascript\nvar ProgressBar = require('progressbar.js')\nvar line = new ProgressBar.Line('#container');\n```\n\nAMD\n\n```javascript\nrequire.config({\n    paths: {\"progressbar\": \"../bower_components/progressbar.js/dist/progressbar\"}\n});\n\ndefine(['progressbar'], function(ProgressBar) {\n    var line = new ProgressBar.Line('#container');\n});\n```\n\nGlobal variable\n\n```javascript\n// If you aren't using any module loader, progressbar.js exposes\n// global variable: window.ProgressBar\nvar line = new ProgressBar.Line('#container');\n```\n\nFiles in `dist/` folder are UMD modules built with Browserify's `--standalone` switch. Read more about [standalone Browserify builds](http://www.forbeslindesay.co.uk/post/46324645400/standalone-browserify-builds).\n\n\n# How it works\n\nProgress bars are just regular SVG paths.\nRead [Jake Archibald's blog post](http://jakearchibald.com/2013/animated-line-drawing-svg/) to see how the path drawing works under the hood.\n\n*ProgressBar.js* uses [shifty](https://jeremyckahn.github.io/shifty/) tweening library to animate path drawing.\nSo in other words, animation is done with JavaScript using [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame).\nAnimating with JS gives more control over the animation and is supported across major browsers. For example IE [does not support](https://connect.microsoft.com/IE/feedbackdetail/view/920928/ie-11-css-transition-property-not-working-for-svg-elements)\nanimating SVG properties with CSS transitions.\n\n\n# API\n\n**NOTE:** Line, Circle and SemiCircle all point to the same\ndocumentation which is named Shape. You almost certainly should\nreplace it(Shape) with Line, Circle or SemiCircle.\n\n**Example:** if documentation states `Shape.animate()`, replace it with\n`Circle.animate()`, simple. Shape is the base object for all\nprogress bars and currently undocumented internal module.\n\n[**ProgressBar**](#api)\n\n* [Line(container, [*options*])](#shapecontainer-options)\n    * [*svg*](#shapesvg)\n    * [*path*](#shapepath)\n    * [*trail*](#shapetrail)\n    * [*text*](#shapetext)\n    * [animate(progress, [*options*], [*cb*])](#shapeanimateprogress-options-cb)\n    * [set(progress)](#shapesetprogress)\n    * [stop()](#shapestop)\n    * [value()](#shapevalue)\n    * [setText(text)](#shapesettexttext)\n    * [destroy()](#shapedestroy)\n\n\n* [Circle(container, [*options*])](#shapecontainer-options)\n    * [*svg*](#shapesvg)\n    * [*path*](#shapepath)\n    * [*trail*](#shapetrail)\n    * [*text*](#shapetext)\n    * [animate(progress, [*options*], [*cb*])](#shapeanimateprogress-options-cb)\n    * [set(progress)](#shapesetprogress)\n    * [stop()](#shapestop)\n    * [value()](#shapevalue)\n    * [setText(text)](#shapesettexttext)\n    * [destroy()](#shapedestroy)\n\n\n* [SemiCircle(container, [*options*])](#shapecontainer-options)\n    * [*svg*](#shapesvg)\n    * [*path*](#shapepath)\n    * [*trail*](#shapetrail)\n    * [*text*](#shapetext)\n    * [animate(progress, [*options*], [*cb*])](#shapeanimateprogress-options-cb)\n    * [set(progress)](#shapesetprogress)\n    * [stop()](#shapestop)\n    * [value()](#shapevalue)\n    * [setText(text)](#shapesettexttext)\n    * [destroy()](#shapedestroy)\n\n\n* [Path(path, [*options*])](#pathpath-options)\n    * [*path*](#pathpath)\n    * [animate(progress, [*options*], [*cb*])](#pathanimateprogress-options-cb)\n    * [set(progress)](#pathsetprogress)\n    * [stop()](#pathstop)\n    * [value()](#pathvalue)\n\nFunctions use node-style callback convention. Callback function is always the last given parameter.\n\nShapes have different SVG canvas sizes:\n\nShape      | Canvas size\n-----------|------------------------\nCircle     | `100x100`\nSemiCircle | `100x50`\nLine       | `100x{opts.strokeWidth}`\n\nAll shapes are fitted exactly to their canvases.\n\n**Important:** make sure that your container has same aspect ratio\nas the SVG canvas. For example: if you are using SemiCircle,\nset e.g.\n\n```css\n#container {\n    width: 300px;\n    height: 150px;\n}\n```\n\n## Shape(container, [*options*])\n\nLine, Circle or SemiCircle shaped progress bar. Appends SVG to container.\n\n**Example**\n\n```javascript\nvar progressBar = new ProgressBar.Circle('#container', {\n    strokeWidth: 2\n});\n```\n\nWith Line shape, you can control the width of the line by specifying e.g. `height: 5px`\nwith CSS.\n\n**Parameters**\n\n* `container` Element where SVG is added. Query string or element.\n\n    For example `\"#container\"` or `document.getElementById(\"#container\")`\n\n* `options` Options for path drawing.\n\n    ```javascript\n    {\n        // Stroke color.\n        // Default: \"#555\"\n        color: \"#3a3a3a\",\n\n        // Width of the stroke.\n        // Unit is percentage of SVG canvas' size.\n        // Default: 1.0\n        strokeWidth: 2.1,\n\n        // If trail options are not defined, trail won't be drawn\n\n        // Color for lighter trail stroke\n        // underneath the actual progress path.\n        // Default: '#eee'\n        trailColor: \"#f4f4f4\",\n\n        // Width of the trail stroke. Trail is always centered relative to\n        // actual progress path.\n        // Default: same as strokeWidth\n        trailWidth: 0.8,\n\n        // Inline CSS styles for the created SVG element\n        // Set null to disable all default styles.\n        // You can disable individual defaults by setting them to `null`.\n        svgStyle: {\n            display: 'block',\n\n            // Important: make sure that your container has same\n            // aspect ratio as the SVG canvas. See SVG canvas sizes above.\n            width: '100%'\n        },\n\n        // Text options. Text element is a <p> element appended to container\n        // You can add CSS rules for the text element with the className\n        // NOTE: When text is set, 'position: relative' will be set to the\n        // container for centering. You can also prevent all default inline\n        // styles with 'text.style: null'\n        // Default: null\n        text: {\n            // Initial value for text.\n            // Default: null\n            value: 'Text',\n\n            // Class name for text element.\n            // Default: 'progressbar-text'\n            className: 'progressbar__label',\n\n            // Inline CSS styles for the text element.\n            // If you want to modify all CSS your self, set null to disable\n            // all default styles.\n            // You can disable individual defaults by setting them to `null`.\n            // If the style option contains values, container is automatically\n            // set to position: relative.\n            // Default: object speficied below\n            style: {\n                // Text color.\n                // Default: same as stroke color (options.color)\n                color: '#f00',\n                position: 'absolute',\n                left: '50%',\n                top: '50%',\n                padding: 0,\n                margin: 0,\n                // You can specify styles which will be browser prefixed\n                transform: {\n                    prefix: true,\n                    value: 'translate(-50%, -50%)'\n                }\n            },\n\n            // Only effective if the shape is SemiCircle.\n            // If true, baseline for text is aligned with bottom of\n            // the SVG canvas. If false, bottom line of SVG canvas\n            // is in the center of text.\n            // Default: true\n            alignToBottom: true\n        },\n\n        // Fill color for the shape. If null, no fill.\n        // Default: null\n        fill: \"rgba(0, 0, 0, 0.5)\",\n\n        // Duration for animation in milliseconds\n        // Default: 800\n        duration: 1200,\n\n        // Easing for animation. See #easing section.\n        // Default: \"linear\"\n        easing: \"easeOut\",\n\n        // See #custom-animations section\n        // Built-in shape passes reference to itself and a custom attachment\n        // object to step function\n        from: { color: '#eee' },\n        to: { color: '#000' },\n        step: function(state, circle, attachment) {\n            circle.path.setAttribute('stroke', state.color);\n        }\n    }\n    ```\n\n## Shape.svg\n\nReference to [SVG](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg) element where progress bar is drawn.\n\n## Shape.path\n\nReference to [SVG path](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path) which presents the actual progress bar.\n\n## Shape.trail\n\nReference to [SVG path](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path) which presents the trail of the progress bar.\nReturns `null` if trail is not defined.\n\n## Shape.text\n\nReference to [p element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p) which presents the text label for progress bar.\nReturns `null` if text is not defined.\n\n## Shape.animate(progress, [*options*], [*cb*])\n\nAnimates drawing of a shape.\n\n**Example**\n\n```javascript\nprogressBar.animate(0.3, {\n    duration: 800\n}, function() {\n    console.log('Animation has finished');\n});\n```\n\n**Parameters**\n\n* `progress` progress from 0 to 1.\n* `options` Animation options. These options override the defaults given in initialization.\n\n    ```javascript\n    {\n        // Duration for animation in milliseconds\n        // Default: 800\n        duration: 1200,\n\n        // Easing for animation. See #easing section.\n        // Default: \"linear\"\n        easing: \"easeInOut\",\n\n        // See #custom-animations section\n        // Built-in shape passes reference to itself and a custom attachment\n        // object to step function\n        from: { color: '#eee' },\n        to: { color: '#000' },\n        step: function(state, circle, attachment) {\n            circle.path.setAttribute('stroke', state.color);\n        }\n    }\n    ```\n\n* `cb` Callback function which is called after animation ends.\n\n## Shape.set(progress)\n\nSets progress instantly without animation. Clears all animations\nfor path.\n\n## Shape.stop()\n\nStops animation to its current position.\n\n## Shape.value()\n\nReturns current shown progress from 0 to 1. This value changes when animation is running.\n\n## Shape.setText(text)\n\nSets text to given a string. If you need to dynamically modify the text element,\nsee [.text](#shapetext) attribute.\n\n## Shape.destroy()\n\nRemoves SVG element from container and removes all references to DOM elements. Destroying is irreversible.\n\n<br>\n<br>\n\n## Path(path, [*options*])\n\nCustom shaped progress bar. You can create arbitrary shaped progress bars by\npassing a SVG path created with e.g. Adobe Illustrator. It's on caller's responsibility to append SVG to DOM.\n\n**Example**\n\nAssuming there was SVG object with heart shaped path in HTML\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\n    <path fill-opacity=\"0\" stroke-width=\"0.5\" stroke=\"#f4f4f4\" d=\"M81.495,13.923c-11.368-5.261-26.234-0.311-31.489,11.032C44.74,13.612,29.879,8.657,18.511,13.923  C6.402,19.539,0.613,33.883,10.175,50.804c6.792,12.04,18.826,21.111,39.831,37.379c20.993-16.268,33.033-25.344,39.819-37.379  C99.387,33.883,93.598,19.539,81.495,13.923z\"/>\n    <path id=\"heart-path\" fill-opacity=\"0\" stroke-width=\"0.6\" stroke=\"#555\" d=\"M81.495,13.923c-11.368-5.261-26.234-0.311-31.489,11.032C44.74,13.612,29.879,8.657,18.511,13.923  C6.402,19.539,0.613,33.883,10.175,50.804c6.792,12.04,18.826,21.111,39.831,37.379c20.993-16.268,33.033-25.344,39.819-37.379  C99.387,33.883,93.598,19.539,81.495,13.923z\"/>\n</svg>\n```\n\nInitialization would be this easy\n\n```javascript\nvar svgPath = document.getElementById(\"heart-path\");\nvar path = new ProgressBar.Path(svgPath, {\n    duration: 300\n});\n```\n\n**Working with embedded SVG**\n\nIf the SVG was not inline in the HTML but instead in, say, an `<object>` tag, we'd have to take extra steps to wait until it has loaded and then access it differently since it's in a separate DOM tree. Given e.g.:\n\n```html\n<object id=\"heart\" type=\"image/svg+xml\" data=\"heart.svg\">No SVG support :(</object>\n```\n\nwe could do\n\n```javascript\nvar heart = document.getElementById('heart');\nheart.addEventListener('load', function () {\nvar path = new ProgressBar.Path(heartObject.contentDocument.querySelector('#heart-path'), {\n    duration: 300\n});\n```\n\n**Parameters**\n\n* `path` [SVG Path](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) object. For example `$('svg > path:first-child')[0]`.\n* `options` Animation options.\n\n    ```javascript\n    {\n        // Duration for animation in milliseconds\n        // Default: 800\n        duration: 1200,\n\n        // Easing for animation. See #easing section.\n        // Default: \"linear\"\n        easing: \"easeIn\",\n\n        // Attachment which can be any object\n        // you need to modify within the step function.\n        // Passed as a parameter to step function.\n        // Default: undefined\n        attachment: document.querySelector('#container > svg'),\n\n        // See #custom-animations section\n        from: { color: '#eee' },\n        to: { color: '#000' },\n        step: function(state, path, attachment) {\n            // Do any modifications to attachment and/or path attributes\n        }\n    }\n    ```\n\n## Path.path\n\nReference to [SVG path](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path) which presents the actual progress bar.\n\n## Path.animate(progress, [*options*], [*cb*])\n\nAnimates drawing of path.\n\n**Example**\n\n```javascript\npath.animate(0.3, {\n    duration: 800\n}, function() {\n    console.log('Animation has finished');\n});\n```\n\n**Parameters**\n\n* `progress` progress from 0 to 1.\n* `options` Animation options. These options override the defaults given in initialization.\n\n    ```javascript\n    {\n        // Duration for animation in milliseconds\n        // Default: 800\n        duration: 1200,\n\n        // Easing for animation. See #easing section.\n        // Default: \"linear\"\n        easing: \"easeOut\",\n\n        // Attachment which can be any object\n        // you need to modify within the step function.\n        // Passed as a parameter to step function.\n        // Default: undefined\n        attachment: document.querySelector('#container > svg'),\n\n        // See #custom-animations section\n        from: { color: '#eee' },\n        to: { color: '#000' },\n        step: function(state, path, attachment) {\n            // Do any modifications to attachment and/or path attributes\n        }\n    }\n    ```\n\n* `cb` Callback function which is called after transition ends.\n\n## Path.set(progress)\n\nSet progress instantly without animation. Clears all transitions\nfor path.\n\n## Path.stop()\n\nStops animation to its current position.\n\n## Path.value()\n\nReturns current shown progress from 0 to 1. This value changes when animation is running.\n\n<br>\n<br>\n\n# Parameters in detail\n\n## Easing\n\nEasing functions [provided with *shifty* are supported](https://github.com/jeremyckahn/shifty/blob/master/src/shifty.formulas.js).\n\nA few basic easing options:\n\n* `\"linear\"`\n* `\"easeIn\"`\n* `\"easeOut\"`\n* `\"easeInOut\"`\n\n# Custom animations\n\nSee [example in demo page](https://kimmobrunfeldt.github.io/progressbar.js#example-custom-animation).\n\nCustomizing animations is possible with the help of `from`, `to` and `step` parameters.\nTweening engine changes defined values over time and calls step function for each animation's frame.\n\n* `from` Object containing values which should be tweened.\n These values represent the starting values of the animation. Default: `{}`.\n\n    For example\n\n    ```javascript\n    {\n        // Start from thin gray line\n        width: 0.1,\n        color: \"#eee\"\n    }\n    ```\n\n    Thanks to shifty, you can tween values in formats like `translateX(45px)`, `rgb(0,255,0)` and `#fff`.\n    See all supported string formats from [shifty's documentation](http://jeremyckahn.github.io/shifty/dist/doc/modules/Tweenable.token.html)\n\n    Easing defined as option for animation applies to all of the specified values.\n\n* `to` Object containing values which should be tweened. These represent the final values after animation is done. Default: `{}`.\n\n    For example\n\n    ```javascript\n    {\n        // Finish to thick black line\n        width: 1,\n        color: \"#000\"\n    }\n    ```\n\n    *Signature must match `from`*\n\n* `step` Function called for each animation step. Tweened values, a reference to the path or shape, and an attachment are passed as parameters. Attachment can be reference to any object you need to modify within step function. Default: `function() {}`.\n\n    **This function is called multiple times per second.\n    To make sure animations run smoothly, keep it minimal.**\n\n    For example\n\n    ```javascript\n    function(state, shape, attachment) {\n        shape.path.setAttribute('stroke-width', state.width);\n        shape.path.setAttribute('stroke', state.color);\n        attachment.text.innerHTML = shape.value()*100;\n    }\n    ```\n\n**Note:** There's a big difference between passing the `from` and `to` parameters in initialization\nof progress bar compared to passing in `.animate()` call. Here's example code and illustrations to explain the difference:\n\n**Pass in initialization**\n\n```javascript\nvar bar = new ProgressBar.Line('#container', {\n    from: { color: '#000 '},\n    to: { color: '#888 '},\n    step: function(state, bar, attachment) {\n        bar.path.setAttribute('stroke', state.color);\n    }\n});\n```\n\n![](docs/animate-init.png)\n\n\n**Pass in `.animate()` call**\n\n```javascript\nvar bar = new ProgressBar.Line('#container', {\n    step: function(state, bar, attachment) {\n        bar.path.setAttribute('stroke', state.color);\n    }\n});\n\nvar opts = {\n    from: { color: '#000 '},\n    to: { color: '#888 '}\n};\nbar.animate(0.5, opts);\n```\n\n![](docs/animate-call.png)\n\n\n## Examples\n\n* [**Minimal**](http://kimmobrunfeldt.github.io/progressbar.js/examples/minimal/) [*see code*](https://github.com/kimmobrunfeldt/progressbar.js/tree/gh-pages/examples/minimal)\n* [**File upload**](http://kimmobrunfeldt.github.io/progressbar.js/examples/upload/) [*see code*](https://github.com/kimmobrunfeldt/progressbar.js/tree/gh-pages/examples/upload)\n* [**Telegram**](http://kimmobrunfeldt.github.io/progressbar.js/examples/telegram/) [*see code*](https://github.com/kimmobrunfeldt/progressbar.js/tree/gh-pages/examples/telegram)\n* [**Password strength**](http://kimmobrunfeldt.github.io/progressbar.js/examples/password-strength/) [*see code*](https://github.com/kimmobrunfeldt/progressbar.js/tree/gh-pages/examples/password-strength)\n\n# Contributing\n\nSee [documentation for contributors](CONTRIBUTING.md).\n\n# Thanks\n\nThis project is a grateful recipient of the [Futurice Open Source sponsorship program](http://futurice.com/blog/sponsoring-free-time-open-source-activities?utm_source=github&utm_medium=spice&utm_campaign=progressbar).\n",
  "readmeFilename": "README.md",
  "_id": "progressbar.js@0.9.0",
  "dist": {
    "shasum": "6ba3f9b60dd17a88b9cb5bfffb6de7b450550cb1"
  },
  "_from": "progressbar.js@",
  "_resolved": "https://registry.npmjs.org/progressbar.js/-/progressbar.js-0.9.0.tgz"
}
